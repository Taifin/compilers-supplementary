-- Expression evaluator

import List;
import State;
import World;

-- As association map which maps "\otimes" into "\oplus"
var ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (expr, expr)         |
--        Seq     (expr, expr)         |
--        Skip                         |
--        Read    (string)             |
--        Write   (expr)               |
--        If      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        DoWhile (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Ignore  (expr)

-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, v] -> [c, v : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

fun eval (c@[s, w], expr) {
  case expr of 
    Assn (l, r) -> 
      case evalList(c, {l, r}) of 
        [c@[s, w], Ref(x) : v : _] -> [[s <- [x, v], w], v]
      esac
  | Seq (e1, e2) -> eval(eval(c, e1)[0], e2)
  | Skip -> [c, T]
  | Read (id) -> 
      case readWorld(w) of 
        [v, w] -> [[s <- [id, v], w], T]
      esac
  | Write (exp) -> 
      case eval(c, exp) of 
        [[s, w], v] -> [[s, writeWorld(v, w)], T]
      esac
  | If (cond, thn, els) ->
      case eval(c, cond) of
        [c, v] -> if v 
                  then eval(c, thn)
                  else eval(c, els)
                  fi
      esac
  | While (cond, body) ->
      case eval(c, cond) of 
        [c, v] -> if v != 0
                  then eval(c, Seq(body, expr))
                  else [c, T]
                  fi
      esac
  | DoWhile (body, cond) -> eval(eval(c, body)[0], While(cond, body))
  | Var (vr) -> [c, s(vr)]
  | Ref (vr) -> [c, Ref(vr)]
  | Const (int) -> [c, int]
  | Binop (op, l, r) -> 
      case evalList(c, {l, r}) of
        [c, w : v : _] -> [c, evalOp(op, w, v)]
      esac
  | Ignore (exp) -> [eval(c, exp)[0], T]
  esac
}


-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState, createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}
