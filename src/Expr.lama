-- Expression evaluator

import List;
import Array;
import State;
import World;
import Lexer;
import Parser;
import Fun;
import Builtins;

-- As association map which maps "\otimes" into "\oplus"
var ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (expr, expr)         |
--        Set     (string, expr)       |
--        Seq     (expr, expr)         |
--        Skip                         |
--        if      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        DoWhile (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Call    (string, expr list)  |
--        Ignore  (expr)               |
--        String  (string)             |
--        Array   (expr list)          |
--        Sexp    (string, expr list)  |
--        Elem    (expr, expr)         |
--        ElemRef (expr, expr)         |
--        Builtin (string, expr list)

-- Helper function: checks that given name designates a regular variable in
-- a given state
fun lookupVal (state, name) {
  case state.lookup (name) of
    x@Val (_) -> x
  | _         -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
  esac
}

-- Helper function: checks that given name designates a function in
-- a given state
fun lookupFun (state, name) {
  case state.lookup (name) of
    x@Fun (_, _) -> x
  | _            -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
  esac
}

-- Helper function: adds a bunch of regular variables current scope
fun addNames (state, names) {
  foldl (fun (s, name) {s.addName (name, Val (0))}, state, names)
}

-- Helper function: adds a function in current scope
fun addFunction (state, name, args, body) {
  state.addName (name, Fun (args, body))
}

fun addNamesVals(state, names, vals) {
  foldl (fun (s, [name, value]) {s.addName(name, value)}, state, zip(names, vals))
}

fun addDefs(state, defs) {
  foldl(fun (st, def) {
                case def of 
                  Fun(name, args, body) -> addFunction(st, name, args, body)
                  | Var (v) -> addNames(st, v)
                esac
              }, state, defs)
}
                                        
-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, v] -> [c, v : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

fun eval (c@[s, w], expr) {
  fun set(c@[s, w], name, value) {
    [[s <- [name, value], w], value]
  }

  case expr of 
    Assn (l, r) -> 
      case evalList(c, {l, r}) of 
        [c, {l, r}] -> case l of
                          ElemRef (arr, ind) -> [c, arr[ind] := r]
                        | _ -> set(c, l, r)
                       esac
      esac
  | Set (name, expr) -> 
      case eval(c, expr) of 
        [c, value] -> set(c, name, value)
      esac 
  | Seq (e1, e2) -> eval(eval(c, e1)[0], e2)
  | Skip -> [c, T]
  | If (cond, thn, els) ->
      case eval(c, cond) of
        [c, v] -> if v 
                  then eval(c, thn)
                  else eval(c, els)
                  fi
      esac
  | While (cond, body) ->
      case eval(c, cond) of 
        [c, v] -> if v != 0
                  then eval(c, Seq(body, expr))
                  else [c, T]
                  fi
      esac
  | DoWhile (body, cond) -> eval(eval(c, body)[0], While(cond, body))
  | Var (vr) -> [c, lookup(s, vr)]
  | Ref (vr) -> [c, vr]
  | Const (int) -> [c, int]
  | Binop (op, l, r) -> 
      case evalList(c, {l, r}) of
        [c, w : v : _] -> [c, evalOp(op, w, v)]
      esac
  | Ignore (exp) -> [eval(c, exp)[0], T]
  | Call (f, args) -> 
      case lookup(s, f) of 
        Fun (_, External) -> eval(c, Builtin(f, args))
      | Fun(locs, body) -> 
          case evalList(c, args) of 
            [[st, w], vals] -> 
              case eval([addNamesVals(enterFunction(st), locs, vals), w], body) of 
                [[ss, w], v] -> [[leaveFunction(s, getGlobal(ss)), w], v]
              esac
          esac
      esac
  | Scope (d, e) -> 
      case enterScope(s) of 
          st -> case eval([addDefs(st, d), w], e) of 
            [[st, w], v] -> [[leaveScope(st), w], v]
          esac
      esac
  | Array (elems) -> 
    case evalList(c, elems) of 
      [c, vals] -> [c, listArray(vals)]
    esac
  | Sexp (tag, elems) -> 
    case evalList(c, elems) of 
      [c, vals] -> [c, Sexp(tag, listArray(vals))]
    esac
  | Elem (arrExpr, indExpr) -> 
    case evalList(c, {arrExpr, indExpr}) of
      [c, {arr, ind}] -> case arr of 
                            Sexp (_, args) -> [c, args[ind]]
                          | _              -> [c, arr[ind]]
                        esac
    esac
  | ElemRef (arrExpr, indExpr) ->
    case evalList(c, {arrExpr, indExpr}) of 
      [c, {arr, ind}] -> case arr of
                            Sexp (_, args) -> [c, ElemRef(args, ind)]
                          | _              -> [c, ElemRef(arr, ind)]
                         esac
    esac 
  | Builtin (name, args) -> 
    case evalList(c, args) of
      [[s, w], vals] -> case evalBuiltin(name, vals, w) of
                          [res, w] -> [[s, w], res]
                        esac
    esac
  | String (strng) -> [c, strng] 
  esac
}


-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState ().enterScope.addName ("read",   Fun ({}, External))
                                      .addName ("write",  Fun ({"a"}, External))
                                      .addName ("length", Fun ({"a"}, External)), createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}
