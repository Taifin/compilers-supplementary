-- Stack machine.

import Ref;
import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Parser;
import Lexer;
import Expr;
import Builtins;
import Buffer;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  -- Shows a location (a reference to function argument, local or global variable)
  fun showLoc (d) {
    case d of
      Arg (i) -> sprintf ("arg[%d]", i)
    | Loc (i) -> sprintf ("loc[%d]", i)
    | Glb (x) -> sprintf ("%s", x)
    esac
  }
  
  case i of
    BINOP  (s)       -> sprintf ("BINOP %s", s)
  | LD     (x)       -> sprintf ("LD %s", showLoc (x))
  | LDA    (x)       -> sprintf ("LDA %s", showLoc (x))
  | ST     (x)       -> sprintf ("ST %s", showLoc (x))
  | STI              -> "STI"
  | SEXP   (s, n)    -> sprintf ("SEXP ""%s"", %d", s, n)
  | CONST  (n)       -> sprintf ("CONST %d", n)
  | LABEL  (s)       -> sprintf ("LABEL %s", s)
  | JMP    (l)       -> sprintf ("JMP %s", l)
  | CJMP   (c, l)    -> sprintf ("CJMP %s, %s", c, l)
  | CALL   (f, n)    -> sprintf ("CALL %s, %d", f, n)
  | BEGIN  (f, a, l) -> sprintf ("BEGIN %s, %d, %d", f, a, l)
  | GLOBAL (x)       -> sprintf ("GLOBAL %s", x)
  | END              -> sprintf ("END")
  | DUP              -> "DUP"
  | DROP             -> "DROP"
  | STRING (s)       -> sprintf ("STRING ""%s""", s)
  | ARRAY  (n)       -> sprintf ("ARRAY %d", n)
  | STA              -> "STA"
  | ELEM             -> "ELEM"
  | BUILTIN (f, n)   -> sprintf ("BUILTIN %s, %d", f, n)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  var map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];
  
  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Stack machine interpreter. Takes an environment, a world and a program,
-- returns a final output
fun eval (env, w, insns) {
  -- Global state maps names of global variables to values
  var globalState = ref (fun (x) {error (sprintf ("name ""%s"" is undefined", x), getLoc (x))});
  
  -- Make a fresh local state: a pair of arrays for arguments and local variables;
  -- takes the numbers of arguments and local variables respectively
  fun makeState (a, l) {
    [initArray (a, fun (_) {0}), initArray (l, fun (_) {0})]
  }

  -- Lookups a location in local/global states
  fun lookup ([args, locs], loc) {
    case loc of
      Arg (i) -> args[i]
    | Loc (i) -> locs[i]
    | Loc (i) -> locs[i]
    | Glb (x) -> deref (globalState) (x)
    esac 
  }

  -- Assigns a value to a location
  fun assign ([args, locs], loc, vl) {
    case loc of
      Arg (i) -> args[i] := vl
    | Loc (i) -> locs[i] := vl
    | Glb (x) -> var g = deref (globalState);
                 globalState ::= fun (y) {if compare (x, y) == 0 then vl else g (y) fi}
    esac;
    [args, locs]
  }

  -- Takes n positions from the list, retursn a pair: the remaining list and the taken
  -- sublist
  fun take (list, n) {
    fun inner (n, acc, list) {
      if n == 0
      then [list, acc]
      else inner (n-1, list.hd : acc, list.tl)
      fi
    }

    inner (n, {}, list)
  }

  -- Core interpreter: takes a configuration and a program, returns a configuration
  fun eval (c@[stack, cstack, st, w], insns) {
      fun createLocal(stack, nargs, nlocals) {
        case take(stack, nargs) of
          [stack, vals] -> case foldl(fun([state, n], value) { [assign(state, Arg(n), value), n + 1] }, [makeState(nargs, nlocals), 0], vals) of 
                              [state, _] -> [stack, state]
                          esac
        esac
      }

      fun getArr(arr) {
        case arr of 
            Sexp (_, elems) -> elems
          | _ -> arr 
        esac
      }

      case insns of 
        ins:insns -> -- printf("%s\n%s\n", ins.string, stack.string);
          case ins of 
              READ -> 
                case readWorld(w) of
                  [v, nw] -> eval([v:stack, cstack, st, nw], insns)
                esac
            | WRITE -> 
                case stack of
                  z:rst -> eval([rst, cstack, st, writeWorld(z, w)], insns)
                esac
            | BINOP (s) ->
                case stack of 
                  y:x:rst -> eval([evalOp(s, x, y):rst, cstack, st, w], insns)
                esac
            | LD (x) -> eval([lookup(st, x):stack, cstack, st, w], insns)
            | ST (x) -> 
                case stack of
                  z:rst -> eval([rst, cstack, assign(st, x, z), w], insns)
                esac
            | CONST (n) -> eval([n:stack, cstack, st, w], insns)
            | LABEL (l) -> eval(c, insns)
            | JMP (l) -> eval(c, fromLabel(env, l))
            | CJMP (cn, l) -> 
                case stack of 
                  h:stack -> 
                    case h of 
                        0 -> case cn of 
                                "nz" -> eval([stack, cstack, st, w], insns)
                              | "z" -> eval([stack, cstack, st, w], fromLabel(env, l))
                              esac
                      | _ -> case cn of 
                                "nz" -> eval([stack, cstack, st, w], fromLabel(env, l))
                              | "z" -> eval([stack, cstack, st, w], insns)
                              esac
                    esac
                esac
            | LDA (x) -> eval([Ref(x):stack, cstack, st, w], insns)
            | STI     -> 
                case stack of 
                  v:Ref(x):stack -> eval([v:stack, cstack, assign(st, x, v), w], insns)
                esac
            | DROP    -> 
                case stack of 
                  _:stack -> eval([stack, cstack, st, w], insns)
                  | _ -> eval([[], cstack, st, w], insns)
                esac 
            | DUP     -> 
                case stack of 
                  x:stack -> eval([x:x:stack, cstack, st, w], insns)
                esac
            | CALL (fLabel, _) -> eval([stack, [st, insns]:cstack, st, w], fromLabel(env, fLabel))
            | BEGIN (_, nargs, nlocals) -> 
                case createLocal(stack, nargs, nlocals) of 
                  [stack, st] -> eval([stack, cstack, st, w], insns)
                esac
            | END -> 
                case cstack of 
                    [st, p]:cstack -> eval([stack, cstack, st, w], p)
                  | {} -> c
                esac
            | GLOBAL (x) -> eval([stack, cstack, assign(st, Glb(x), 0), w], insns)
            | STRING (s) -> eval([s:stack, cstack, st, w], insns)
            | ARRAY (len) ->
                case take(stack, len) of
                  [rst, elems] -> eval([listArray(elems) : rst, cstack, st, w], insns)
                esac
            | SEXP (name, len) -> 
                case take(tl(stack), len) of 
                  [rst, elems] -> eval([Sexp(name, listArray(elems)) : rst, cstack, st, w], insns)
                esac
            | STA -> 
                case stack of 
                  value : idx : arr : rst -> 
                    var a = getArr(arr);
                    a[idx] := value;
                    eval([a[idx]:rst, cstack, st, w], insns)
                esac
            | ELEM ->
                case stack of 
                  idx : arr : rst ->
                    var a = getArr(arr);
                    eval([a[idx]:rst, cstack, st, w], insns)
                esac
            | BUILTIN (func, nargs) -> 
                case take(stack, nargs) of
                  [rst, args] -> 
                    case evalBuiltin(func, args, w) of 
                      [res, w] -> eval([res:rst, cstack, st, w], insns)
                    esac
                esac
          esac
      | _ -> c
    esac
  }
  
  
  eval ([{}, {}, makeState (0, 0), w], insns) [3].getOutput
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), createWorld (input), insns)
}

-- Compilation environment: generates labels
fun makeCompEnv (nLabels, scopeDepth, state, nLocals, nArgs, functions) {
  -- Generates a new label
  fun genLabel () {
    [sprintf ("L%d", nLabels), makeCompEnv (nLabels+1, scopeDepth, state, nLocals, nArgs, functions)]
  }

  -- Adds a new function 
  fun rememberFun (fLabel, args, body) {
    makeCompEnv (nLabels,
                 scopeDepth,
                 state,
                 nLocals,
                 nArgs,
                 Fun (fLabel, args, body, state) : functions)
  }

  -- Enters a local scope
  fun beginScope () {
    makeCompEnv (nLabels, scopeDepth+1, enterScope (state), nLocals, nArgs, functions)
  }

  -- Leaves a local scope
  fun endScope () {
    makeCompEnv (nLabels, scopeDepth-1, leaveScope (state), nLocals, nArgs, functions)
  }

  -- Adds an argument for the current function
  fun addArg (name) {
    makeCompEnv (nLabels, scopeDepth, addName (state, name, Arg (nArgs)), nLocals, nArgs+1, functions)
  }

  -- Adds a variable in the scope
  fun addVar (name) {
    if isGlobal ()
    then makeCompEnv (nLabels, scopeDepth, addName (state, name, Glb (name, true)), nLocals, nArgs, functions)
    else makeCompEnv (nLabels, scopeDepth, addName (state, name, Loc (nLocals, true)), nLocals+1, nArgs, functions)
    fi
  }

  -- Adds a value in the scope
  fun addVal (name) {
    if isGlobal ()
    then makeCompEnv (nLabels, scopeDepth, addName (state, name, Glb (name, false)), nLocals, nArgs, functions)
    else makeCompEnv (nLabels, scopeDepth, addName (state, name, Loc (nLocals, false)), nLocals+1, nArgs, functions)
    fi
  }

  -- Adds a binding for a function
  fun addFun (name, fLabel, nargs) {
    makeCompEnv (nLabels, scopeDepth, addName (state, name, Fun (fLabel, nargs)), nLocals, nArgs, functions)
  }
  
  -- Enters a function
  fun beginFun (state) {
    makeCompEnv (nLabels, 2, enterFunction (state), 0, 0, functions)
  }

  -- Get functions and empty functions list
  fun getFuns () {
    [functions, makeCompEnv (nLabels, scopeDepth, state, nArgs, nLocals, {})]
  }

  -- Lookups variable
  fun lookupVar (name) {
    case lookup (state, name) of
      Loc (i, true) -> Loc (i)
    | Glb (x, true) -> Glb (x)
    | _             -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
    esac
  }

  -- Lookups value
  fun lookupVal (name) {
    case lookup (state, name) of
      Loc (i, _) -> Loc (i)
    | Glb (x, _) -> Glb (x)
    | Arg (i)    -> Arg (i)
    | _          -> error (sprintf ("the name ""%s"" does not designate a value", name), getLoc (name))
    esac
  }
  
  -- Lookups a name of a function
  fun lookupFun (name) {
    case lookup (state, name) of
      x@Fun (_, _) -> x
    | _            -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
    esac
  }

  -- Gets the number of local variables
  fun getLocals () {
    nLocals
  }

  -- Generates an intrinsic function name
  fun genFunLabel (name) {
     if isGlobal ()
     then [sprintf ("L%s", name),             makeCompEnv (nLabels  , scopeDepth, state, nLocals, nArgs, functions)]
     else [sprintf ("L%s_%d", name, nLabels), makeCompEnv (nLabels+1, scopeDepth, state, nLocals, nArgs, functions)]
     fi 
  }

  -- Checks if the current scope is a global
  fun isGlobal () {
    scopeDepth == 2
  }
  
  [genLabel,
   rememberFun,
   beginScope,
   endScope,
   addArg,
   addVar,
   addVal,
   beginFun,
   getFuns,
   lookupVar,
   lookupVal,
   lookupFun,
   getLocals,
   genFunLabel,
   addFun,
   isGlobal
  ]
}

-- Initialize a new compilation environment
fun initCompEnv () {
  makeCompEnv (0, 0, emptyState (), 0, 0, {})
}

-- Accessor functions
fun genLabel (env) {
  env [0] ()
}

fun rememberFun (env, name, args, body) {
  env [1] (name, args, body)
}

fun beginScope (env) {
  env [2] ()
}

fun endScope (env) {
  env [3] ()
}

fun addArg (env, name) {
  env [4] (name)
}

fun addVar (env, name) {
  env [5] (name)
}

fun addVal (env, name) {
  env [6] (name)
}

fun beginFun (env, state) {
  env [7] (state)
}

fun getFuns (env) {
  env [8] ()
}

fun lookupVar (env, name) {
  env [9] (name)
}

fun lookupVal (env, name) {
  env [10] (name)
}

fun lookupFun (env, name) {
  env [11] (name)
}

fun getLocals (env) {
  env [12] ()
}

fun genFunLabel (env, name) {
  env [13] (name)
}

fun addFun (env, name, fLabel, nargs) {
  env [14] (name, fLabel, nargs)
}

fun isGlobal (env) {
  env [15] ()
}

-- Helper function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then {env}
    else case genLabel (env) of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Helper function: adds a bunch of arguments
fun addArgs (env, names) {
  foldl (fun (env, name) {addArg (env, name)}, env, names)
}

-- Helper function: adds a bunch of local variables
fun addVars (env, names) {
  foldl (fun (env, name) {addVar (env, name)}, env, names)
}

-- Helper function: adds a bunch of locals values
fun addVals (env, names) {
  foldl (fun (env, name) {addVal (env, name)}, env, names)
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.


-- Some guidelines for compiling functions and scopes.
--
-- 1. use env.beginScope/env.endScope properly;
-- 2. in each scope traverse the definitions twice:
--    a. first, add all bindings into symbolic state,
--       using end.addVar/env.addFun;
--    b. do not forget to generate GLOBAL instructions for
--       top-level variable declarations;
--    c. on the secord traversal add functions themselves for
--       future code generation (use env.rememberFun).
-- 3. the overall flow for codegeneration:
--    a. generate the code for thetopmost expression (the progrman itself);
--    b. take list of nested functions definitions via env.getFuns and
--       generate the code for each function;
--    c. repeat b. until no function definitions appear.
-- 4. when compiling functions, do not forget to create proper
--    environment (use env.beginFun) and register arguments
--    (use env.addArg).

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.
-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  fun label (lab, labUsed) {
    if labUsed
    then singletonBuffer (LABEL (lab))
    else emptyBuffer ()
    fi
  }

  fun compileWLabel(env, expr) {
    case env.genLabel of 
      [lbl, env] -> 
        case compile(lbl, env, expr) of 
          [labelUsed, env, code] -> [env, code <+> label(lbl, labelUsed)]
        esac
    esac
  }

  fun compileMany(env, exprs) {
    foldl(fun ([env, code], expr) {
                  case compileWLabel(env, expr) of 
                    [env, exprCode] -> [env, code <+> exprCode]
                  esac
                }, [env, emptyBuffer()], exprs) 
  }
  
  fun compile (lab, env, stmt) {
    -- printf("%s\n", stmt.string);
    case stmt of
      Skip              -> [false, env, emptyBuffer ()]
    | Var    (x)        -> [false, env, singletonBuffer (LD (lookupVal(env, x)))]
    | Ref    (x)        -> [false, env, singletonBuffer (LDA (lookupVal(env, x)))]
    | Const  (n)        -> [false, env, singletonBuffer (CONST (n))]
    | Ignore (x)        -> 
        case compileWLabel(env, x) of 
          [env, eCode] -> [false, env, eCode <+ DROP]
        esac

    | Binop  (op, l, r) -> 
        case compileWLabel(env, l) of 
          [env, lCode] -> 
            case compileWLabel(env, r) of
              [env, rCode] -> [false, env, lCode <+> rCode <+ BINOP(op)]
            esac
        esac

    | Assn   (x, e)     ->
        case compileWLabel(env, e) of 
          [env, eCode] -> 
            case compileWLabel(env, x) of 
              [env, xCode] -> 
              case x of 
                  ElemRef (_, _) -> [false, env, xCode <+> eCode <+ STA]
                | _              -> [false, env, xCode <+> eCode <+ STI]
              esac
            esac
        esac

    | Seq     (s1, s2) -> 
        case env.genLabel of
          [s2Lab, env] ->
             case compile (s2Lab, env, s1) of
               [s2LabUsed, env, s1Code] ->
                  case compile (lab, env, s2) of
                    [labUsed, env, s2Code] -> [labUsed, env, s1Code <+> label (s2Lab, s2LabUsed) <+> s2Code]
                  esac
             esac
        esac

    | If      (e, s1, s2) -> 
        case compileWLabel(env, e) of 
          [env, eCode] ->
              case env.genLabel of 
                [s2Lab, env] -> 
                  case compile(lab, env, s1) of
                    [_, env, s1Code] -> 
                      case compile(lab, env, s2) of
                        [_, env, s2Code] -> [true, env, eCode <+ CJMP("z", s2Lab) <+> s1Code <+ JMP(lab) <+> label(s2Lab, true) <+> s2Code]
                      esac
                  esac
              esac
          esac

    | While   (e, s) -> 
        case compileWLabel(env, e) of 
          [env, eCode] ->
            case env.genLabels(2) of
              [le, ls, env] -> 
                case compile(le, env, s) of 
                  [_, env, sCode] -> [false, env, singletonBuffer(JMP(le)) <+> label(ls, true) <+> sCode <+> label(le, true) <+> eCode <+ CJMP("nz", ls)]
                esac
            esac
        esac

    | DoWhile (s, e) -> 
        case compileWLabel(env, e) of 
          [env, eCode] ->
              case env.genLabels(2) of
                [ls, lbe, env] -> 
                  case compile(lbe, env, s) of
                    [lbeUsed, env, sCode] -> [false, env, label(ls, true) <+> sCode <+> label(lbe, true) <+> eCode <+ CJMP("nz", ls)]
                  esac
              esac  
          esac

    | Call (func, args) -> 
        case lookupFun(env, func) of 
          Fun (fLabel, nargs) -> 
            case foldl(fun ([env, code], expr) { case compileWLabel(env, expr) of 
                                                        [env, eCode] -> [env, code <+> eCode]
                                                      esac  
            }, [env, emptyBuffer()], args) of
              [env, code] -> if (fLabel[0] != '$') 
                             then [false, env, code <+ CALL(fLabel, nargs)]
                             else [false, env, code <+ BUILTIN(func, nargs)]
                             fi
            esac
        esac

    | Scope (defs, body) -> 
        case foldl(fun ([env, funcs, globalDefs], def) {
            case def of 
              Var (ds) -> [addVars(env, ds), funcs, if env.isGlobal
                                                    then foldl (fun (globalDefs, name) { globalDefs <+ GLOBAL(name) }, globalDefs, ds)
                                                    else globalDefs
                                                    fi]
            | Fun (name, args, body) -> 
              case genFunLabel(env, name) of 
                [fLabel, env] -> [addFun(env, name, fLabel, args.size), [fLabel, args, body] : funcs, globalDefs]
              esac
            esac
          }, [beginScope (env), {}, emptyBuffer()], defs) of 
        [env, funcs, globalDefs] -> 
          case compile(lab, foldl(fun(env, [fLabel, args, body]) {rememberFun(env, fLabel, args, body)}, env, funcs), body) of 
            [flag, env, code] -> [flag, endScope(env), globalDefs <+> code]
          esac
        esac
    
    | Array (elems) -> 
        case compileMany(env, elems) of 
          [env, arrCode] -> [false, env, arrCode <+ ARRAY(size (elems))]
        esac
    
    | Sexp (tag, elems) ->
        case compileMany(env, elems) of 
          [env, arrCode] -> [false, env, arrCode <+ CONST(tagHash(tag)) <+ SEXP(tag, size(elems))]
        esac
    
    | Elem (arrExpr, indExpr) -> 
        case compileMany(env, {arrExpr, indExpr}) of 
          [env, code] -> [false, env, code <+ ELEM]
        esac
    
    | ElemRef (arrExpr, indExpr) -> 
        case compileMany(env, {arrExpr, indExpr}) of
          [env, code] -> [false, env, code]
        esac
    
    | String (strng) -> [false, env, singletonBuffer(STRING(strng))]
    | Set (l, r) -> compile(lab, env, Assn(Ref(l), r))
    | _                 ->  failure ("compileSM not implemented\n")
    esac
  }

  fun compileFunc(env, Fun (fLabel, args, body, state)) {
    case compileWLabel(addArgs(beginFun(env, state), args), body) of 
      [env, code] -> [env, singletonBuffer(LABEL(fLabel)) <+ BEGIN(fLabel, args.size, getLocals(env)) <+> code <+ END]
    esac
  }

  fun compileFuncs(env) {
    case getFuns(env) of
      [{}, _] -> emptyBuffer()
      | [funcs, env] -> case foldl(fun ([env, code], func) {
        case compileFunc(env, func) of 
          [env, funcCode] -> [env, code <+> funcCode]
        esac
      }, [env, emptyBuffer()], funcs) of 
          [env, funcsCode] -> funcsCode <+> compileFuncs(env)
        esac
    esac
  }

  case initCompEnv ().beginScope.addFun ("read"  , "$read"  , 0)
                                .addFun ("write" , "$write" , 1)
                                .addFun ("length", "$length", 1).genLabel of
    [endLab, env] ->
       case compile (endLab, env, stmt) of
         [endLabUsed, env, code] -> getBuffer $ singletonBuffer(LABEL("main")) <+ BEGIN("main", 0, getLocals(env)) <+> code <+> label (endLab, endLabUsed) <+ END <+> compileFuncs(env)
       esac
  esac
}
