-- Stack machine.

import List;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ      -> sprintf ("READ")
  | WRITE     -> sprintf ("WRITE")
  | BINOP (s) -> sprintf ("BINOP %s", s)
  | LD    (x) -> sprintf ("LD %s", x)
  | ST    (x) -> sprintf ("ST %s", x)
  | CONST (n) -> sprintf ("CONST %d", n)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration
fun eval (c@[stack, st, w], insns) {
  case insns of 
        ins:insns -> 
          case ins of 
              READ -> 
                case readWorld(w) of
                  [v, nw] -> eval([v:stack, st, nw], insns)
                esac
            | WRITE -> 
                case stack of
                  z:rst -> eval([rst, st, writeWorld(z, w)], insns)
                esac
            | BINOP (s) ->
                case stack of 
                  y:x:rst -> eval([applyBinop(s, x, y):rst, st, w], insns)
                esac
            | LD (x) -> eval([st(x):stack, st, w], insns)
            | ST (x) -> 
                case stack of
                  z:rst -> eval([rst, st <- [x, z], w], insns)
                esac
            | CONST (n) -> eval([n:stack, st, w], insns)                
          esac
      | _ -> c
  esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval ([{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine instructions
fun compileExpr (expr) {
  case expr of 
      Var (x) -> {LD (x)}
    | Const (x) -> {CONST (x)}
    | Binop(op, l, r) -> compileExpr(l) +++ compileExpr(r) +++ {BINOP (op)}
  esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  case stmt of 
      Assn (x, e) -> compileExpr(e) +++ {ST (x)}
    | Seq (stmt1, stmt2) -> compileSM(stmt1) +++ compileSM(stmt2)
    | Skip -> {}
    | Read (x) -> {READ, ST(x)}
    | Write (e) -> compileExpr(e) +++ {WRITE}
  esac
}
